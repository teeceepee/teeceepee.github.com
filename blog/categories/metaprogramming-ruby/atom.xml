<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: metaprogramming-ruby | Why Y]]></title>
  <link href="http://teeceepee.github.com/blog/categories/metaprogramming-ruby/atom.xml" rel="self"/>
  <link href="http://teeceepee.github.com/"/>
  <updated>2014-12-06T17:53:38+08:00</updated>
  <id>http://teeceepee.github.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby notes 1]]></title>
    <link href="http://teeceepee.github.com/blog/2013/07/19/metaprogramming-ruby-notes-1/"/>
    <updated>2013-07-19T13:55:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2013/07/19/metaprogramming-ruby-notes-1</id>
    <content type="html"><![CDATA[<p>这些天在看<a href="http://book.douban.com/">《ruby元编程》</a>。其中有一个关于block的小测验，要模仿C#中的using关键字。</p>

<p>在Ruby中，using可以通过内核方法写一个。内核方法即添加到Kernel模块中的方法，因此可以在程序的任何地方使用，有点像一个关键字。书中给的答案可以通过测试，但是仔细研究发现书中实现的using貌似有些问题，而且是大问题。实现using的目的在于在block中使用资源，使用完毕后自动将资源释放。因此using后面的block一定有一个参数代表资源，using的实现也应该将资源传递给block，所以正确的实现应该如下。</p>

<p>``` ruby using.rb
module Kernel
  def using(resource)</p>

<pre><code>yield resource
</code></pre>

<p>  ensure</p>

<pre><code>resource.dispose
</code></pre>

<p>  end
end
```</p>

<p>书中的实现在<code>yield</code>后没有resource，无法将资源传递给block。不能在block中使用资源，写这玩意儿有啥用？我看的版本是中文版，不清楚原版是否也有这个错误。另外，书中使用的是<code>begin ... ensure ... end</code>，在用<code>def</code>定义方法时<code>begin</code>是可以省略的。</p>

<p>之所以会出现这个问题，我认为是单元测试的用例写的不够严格。下面是与书中原测试等价的测试用例。</p>

<p>``` ruby using_test.rb
require 'test/unit'
require './using.rb'</p>

<p>class Resource
  def dispose</p>

<pre><code>@dispose = true
</code></pre>

<p>  end
  def disposed?</p>

<pre><code>@dispose
</code></pre>

<p>  end
end</p>

<p>class TestUsing &lt; Test::Unit::TestCase
  def setup</p>

<pre><code>@r = Resource.new
</code></pre>

<p>  end</p>

<p>  def test_disposes_of_resources</p>

<pre><code>using(@r) { }
assert @r.disposed?
</code></pre>

<p>  end</p>

<p>  def test_disposes_of_resources_in_case_of_exception</p>

<pre><code>assert_raises(Exception) do
  using(@r) do
    raise Exception
  end
end
</code></pre>

<p>  end
end
```</p>

<p>可以看到，两个测试在block中都没有使用资源。测试的不严谨导致了这个using的大bug。至少应该再添加一个测试，比如：</p>

<p>``` ruby using_test_add.rb
def test_with_block_argument
  using(@r) do |r|</p>

<pre><code>r.disposed?
</code></pre>

<p>  end
end
```</p>

<p>添加这个测试后，书中原代码会无法通过测试，因此可以发现这一bug。</p>

<h1>后记</h1>

<p>刚写完上面的，正在想怎么总结结尾的时候，一个想法忽然在脑海中闪现出来：我是否真的理解了书中设计的using的用法。按照我自己的想法，using的参数是一个实现了dispose方法的资源，后面的block是单形参的。这样using将资源传递给block，在block中使用形参代表资源。后来想了想，using后面的block其实也可以访问到外面的资源，没有必要设置一个参数来传递资源。比如：</p>

<p>``` ruby using_test.rb
def test_using
  using(@r) do</p>

<pre><code># something using @r
# ...
@r.disposed?
</code></pre>

<p>  end
  assert @r.disposed?
end
```</p>

<p>改完测试，运行通过，那这篇博文怎么办...
删还是不删，这是一个问题...</p>

<h1>后记的后记</h1>

<p>终于想出一个不用删掉这篇文章的理由，那就是通过参数传递资源的方式要灵活那么一点。书上的写法因为没有使用参数，所以using后的block必须定义在要立即使用资源的地方，当然C#中的using大约也是这样使用的。但如果资源是通过block的参数传递的，那么这个block就可以通过 <code>Proc.new</code> 或者 <code>lambda</code> 定义在任何地方。比如：</p>

<p>``` ruby using_define_anywhere.rb
def test_define_anywhere
  p = Proc.new do |r|</p>

<pre><code>r.disposed?
</code></pre>

<p>  end
  using(@r, &amp;p)
  assert @r.disposed?
end
```</p>
]]></content>
  </entry>
  
</feed>
