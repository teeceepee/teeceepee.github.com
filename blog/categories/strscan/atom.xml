<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: strscan | Why Y]]></title>
  <link href="http://teeceepee.github.com/blog/categories/strscan/atom.xml" rel="self"/>
  <link href="http://teeceepee.github.com/"/>
  <updated>2014-07-26T12:02:27+08:00</updated>
  <id>http://teeceepee.github.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby StringScanner]]></title>
    <link href="http://teeceepee.github.com/blog/2013/06/03/ruby-stringscanner/"/>
    <updated>2013-06-03T20:09:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2013/06/03/ruby-stringscanner</id>
    <content type="html"><![CDATA[<p>想写一个简单的解释器，源代码用字符串表示。本来想自己写一个scanner，后来发现Ruby库中有一个StringScanner类，但不是用Ruby写的，不能做源码浏览了。在这里记录一下StringScanner的用法。</p>

<h1>&lt;b> strscan &lt;/b></h1>

<p>要用StringScanner类需要 <code>require 'strscan'</code> ，以前老是忘了这个，这次一定要记住。</p>

<p>按照StringScanner<a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/strscan/rdoc/StringScanner.html">官方文档</a>的说法，它的用处是对字符串进行词法扫描操作。我用的最多的是 <code>scan</code> 方法，它与 <code>String#scan</code> 最大的不同是内部维护一个position变量，使得每次扫描都从position开始而不是开头。</p>

<h1>常用方法</h1>

<p><code>StringScanner.new</code> 构造一个StringScanner对象，参数是待扫描的字符串。
<code>ruby StringScanner.new
s = StringScanner.new '(+ a 2)'
</code>
<code>StringScanner#eos?</code> 判断是否扫描完毕。</p>

<p><code>StringScanner#scan</code> 参数pattern为一个正则表达式，尝试从当前位置与pattern匹配，如果成功那么scanner前进到下一个待扫描位置并返回匹配的字符串，前进的数目与匹配字符串的长度相等。匹配失败的话返回 <code>nil</code>。
<code>ruby StringScanner#scan
s = StringScanner.new('test string')
p s.scan(/\w+/)   # -&gt; "test"
p s.scan(/\w+/)   # -&gt; nil
p s.scan(/\s+/)   # -&gt; " "
p s.scan(/\w+/)   # -&gt; "string"
p s.scan(/./)     # -&gt; nil
</code></p>

<p><code>StringScanner#peek</code> 接受一个数字类型的参数len，返回string[pos, len]，也就是即将被扫描的字符串，不推进扫描指针。</p>

<p><code>StringScanner#check</code> 与 <code>scan</code> 类似，但是不推进扫描指针。</p>
]]></content>
  </entry>
  
</feed>
