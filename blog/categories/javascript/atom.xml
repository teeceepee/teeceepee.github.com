<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Why Y]]></title>
  <link href="http://teeceepee.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://teeceepee.github.com/"/>
  <updated>2017-02-14T23:08:31+08:00</updated>
  <id>http://teeceepee.github.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery Utils Replacement]]></title>
    <link href="http://teeceepee.github.com/blog/2016/11/27/jquery-utils-replacement/"/>
    <updated>2016-11-27T16:25:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2016/11/27/jquery-utils-replacement</id>
    <content type="html"><![CDATA[<p>曾几何时，编写跨浏览器的 JavaScript 代码是噩梦一般的存在。在那个浏览器差异巨大、标准提供的功能有限的时代，jQuery 出现后，依靠跨浏览器、功能丰富、接口简洁优雅的特性，迅速成为了前端开发的事实标准。直到现在，jQuery 可能依然是最流行的 JavaScript 库。但是到了现在，现代浏览器不再各自为战，开始遵循相同的标准，而标准本身也在前进，不断加入新的接口。很多逻辑已经可以使用原生的接口实现，不再依赖第三方库。</p>

<p>在我看来，jQuery 的 DOM 操作接口依旧比原生接口好用，还是很难丢弃掉。但很多实用函数已经可以使用原生接口替代。下面整理了几个 jQuery 常用的实用函数，以及对应的原生接口。</p>

<h2>$.each() 和 $.fn.each()</h2>

<p>分别使用 <code>Array.prototype.forEach()</code> 和 <code>NodeList.forEach()</code> 替代。</p>

<p>曾经 JavaScript 只能不停地使用循环来实现遍历，ECMAScript 5 新增了数组等类型的 <code>forEach</code> 方法，因此已经可以不使用 jQuery 的遍历函数了。而且现在最新版本的浏览器也开始支持 NodeList 实例的 <code>forEach</code> 方法。需要注意的是参数顺序是不一样的，<code>forEach</code> 的参数顺序更方便一些，因为很多时候并不需要下标。</p>

<p>``` javascript
$.each(array, function (i, item) {</p>

<p>}</p>

<p>array.forEach(function (item, i) {</p>

<p>}</p>

<p>$(selector).each(function (i, el) {</p>

<p>}</p>

<p>document.querySelectorAll(selector).forEach(function (item, i) {</p>

<p>}
```</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach</a></p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach">https://developer.mozilla.org/en-US/docs/Web/API/NodeList/forEach</a></p>

<h2>$.extend()</h2>

<p>使用 <code>Object.assign()</code> 替代。</p>

<p>很多库和框架都有自己的对象合并方法，方法名称一般是 <code>extend</code> 。ECMAScript 2015 新增了原生的对象合并方法，只不过名字叫 <code>assgin</code>。</p>

<p>``` javascript
$.extend({}, objA, objB)</p>

<p>Object.assign({}, objA, objB)
```</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign</a></p>

<p><a href="https://github.com/nzakas/understandinges6/issues/99">https://github.com/nzakas/understandinges6/issues/99</a></p>

<h2>$.map()</h2>

<p>使用 <code>Array.prototype.map()</code> 替代。</p>

<p>同样需要注意参数顺序。</p>

<p>``` javascript
$.map(array, function(value, index) {</p>

<p>}</p>

<p>array.map(function (value, index) {</p>

<p>}
```</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></p>

<h2>$.proxy()</h2>

<p>使用 <code>Function.prototype.bind()</code> 替代。</p>

<p>函数的 <code>bind</code> 方法是 EMCAScript 5 中新增的非常重要的一个方法，有了它可以尽量避免 <code>that</code>, <code>self</code> 之类的愚蠢变量名。需要注意的是 <code>bind</code> 每次调用都返回一个新的函数，而 <code>$.proxy</code> 在内部做了缓存处理，多次调用返回的是同一个函数。</p>

<p>``` javascript
$.proxy(fn, context)</p>

<p>fn.bind(context)
```</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind</a></p>

<p><a href="http://stackoverflow.com/questions/18848343/underscore-bind-vs-jquery-proxy-vs-native-bind#answer-22860661">http://stackoverflow.com/questions/18848343/underscore-bind-vs-jquery-proxy-vs-native-bind#answer-22860661</a></p>

<h2>$.trim()</h2>

<p>使用 <code>String.prototype.trim()</code> 替代。</p>

<p>MDN 中给出了一个 polyfill 的方法，jQuery 的实现几乎与其一样，<code>$.trim()</code> 不是字符串类型的方法，所以对 <code>null</code> 做了特殊处理，<code>$.trim(null) === ‘’</code>。</p>

<p>``` javascript
$.trim(string)</p>

<p>string.trim()
```</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim</a></p>

<h2>总结</h2>

<p>本文是阅读 <a href="http://youmightnotneedjquery.com/">You Might Not Need jQuery</a> 后写的，页面上有一个选择支持 IE 最老版本的按钮，通过切换不同的开关，可以看到越新的浏览器版本，实现相同功能的代码越简洁统一。相信在浏览器厂商和标准的共同努力下，可以让我们更好得使用原生接口编写前端代码。</p>
]]></content>
  </entry>
  
</feed>
