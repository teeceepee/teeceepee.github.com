<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RubyGems | Why Y]]></title>
  <link href="http://teeceepee.github.com/blog/categories/rubygems/atom.xml" rel="self"/>
  <link href="http://teeceepee.github.com/"/>
  <updated>2016-07-24T12:42:05+08:00</updated>
  <id>http://teeceepee.github.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Explore RubyGems 2]]></title>
    <link href="http://teeceepee.github.com/blog/2015/05/16/explore-rubygems-2/"/>
    <updated>2015-05-16T14:42:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2015/05/16/explore-rubygems-2</id>
    <content type="html"><![CDATA[<h1>What is a gem</h1>

<p>gem 是一种 Ruby 软件包，每个 gem 都有一个名字、版本和平台。名字和版本好理解，平台指的是 CPU 架构、操作系统及版本等信息。</p>

<h2>gem 的目录结构</h2>

<p>gem 的目录结构遵循一些约定，如下：</p>

<p>```
% tree freewill
freewill/
├── bin/
│   └── freewill
├── lib/
│   └── freewill.rb
├── test/
│   └── test_freewill.rb
├── README
├── Rakefile
└── freewill.gemspec</p>

<p>```</p>

<p><code>lib</code> 目录里是 gem 的源代码。除此之外，最重要的就是 <code>.gemspec</code> 文件。<code>.gemspec</code> 文件包含了构建一个 gem 的所有的信息，包括 gem 的名字、版本、平台、包含的文件等。</p>

<h2>Make Your Own Gem</h2>

<p>构建一个 gem 可能是理解 gem 的最好方法。下面会从零开始创建一个示例 gem，我给这个 gem 取名为 <code>factory_boy</code> 。</p>

<p>首先新建一个目录，下面所有的工作都在该目录内完成。</p>

<p><code>
% mkdir factory_boy/
% cd factory_boy
</code></p>

<p>一个 gem 肯定要包含一些代码的，按照约定，这些代码应该放到 <code>lib</code> 目录中，而且 <code>lib</code> 目录中应该有一个和 gem 同名的 <code>.rb</code> 文件。</p>

<p>```
% cat lib/factory_boy.rb
module FactoryBoy
  def self.hi</p>

<pre><code>puts "Hello, I'm a factory boy."
</code></pre>

<p>  end
end</p>

<p>```</p>

<p>好，现在 gem 的代码已经有了，还需要一个 <code>.gemspec</code> 文件，把它命名为 <code>factory_boy.gemspec</code>。</p>

<p><code>ruby factory_boy.gemspec
Gem::Specification.new do |spec|
  spec.name        = 'factory_boy'
  spec.version     = '0.0.1'
  spec.date        = '2015-05-16'
  spec.summary     = "I am a factory boy."
  spec.description = "A factory boy want to meet a factory girl."
  spec.authors     = ["Factory Boss"]
  spec.email       = 'fb@example.com'
  spec.files       = ["lib/factory_boy.rb"]
  spec.homepage    = 'http://fb.example.com'
  spec.license     = 'MIT'
end
</code></p>

<p><code>factory_boy.gemspec</code> 文件描述了该 gem 的许多信息，比较重要的是通过 <code>spec.files = ...</code> 指定 gem 包含的文件，如果没有指定该项，构建出的 gem 是一个不包含任何文件的空 gem。</p>

<p>现在就可以构建一个最简单的 gem 了, <code>gem build</code> 命令可以方便的完成这个操作，将对应的 <code>.gemspec</code> 文件作为参数即可。</p>

<p>``` bash
% gem build ./factory_boy.gemspec
  Successfully built RubyGem
  Name: factory_boy
  Version: 0.0.1
  File: factory_boy-0.0.1.gem</p>

<p>```</p>

<p><code>gem build</code> 命令会将构建好的 gem 放在当前目录，文件名中包含了 gem 的名字和版本。要测试这个 gem 是否能正常工作，需要先安装，然后就可以用 irb 或其他方式测试了。</p>

<p>``` bash
% gem install ./factory_boy-0.0.1.gem
Successfully installed factory_boy-0.0.1
1 gem installed</p>

<p>% irb
irb(main):001:0> require 'factory_boy'
=> true
irb(main):002:0> FactoryBoy.hi
Hello, I'm a factory boy.
=> nil
```</p>

<p>看上去不错，如果想要将自己编写的 gem 发布到 rubygems.org 上，需要用到 <code>gem push</code> 命令。</p>

<h2>更常见的目录结构</h2>

<p>通常一个 gem 会包含多个文件，推荐的做法是在 <code>lib</code> 目录下建立一个与 gem 同名的目录，文件都放到该目录内。使用 <code>require</code> 时会在 <code>lib</code> 目录搜索文件，所以一般 <code>lib</code> 目录下只有一个与 gem 同名的 <code>.rb</code> 文件。我们可以把刚才的 gem 改成如下的目录结构：</p>

<p><code>bash
% tree lib
lib
├── factory_boy
│   ├── hi.rb
│   └── version.rb
└── factory_boy.rb
</code></p>

<p>文件内容改为如下：</p>

<p>``` ruby factory_boy/hi.rb
module FactoryBoy
  def self.hi</p>

<pre><code>puts "Hello, I'm a factory boy."
</code></pre>

<p>  end
end
```</p>

<p><code>ruby factory_boy/version.rb
module FactoryBoy
  VERSION = '0.0.2'
end
</code></p>

<p>``` ruby factory_boy.rb
require 'factory_boy/hi'
require 'factory_boy/version'</p>

<p>module FactoryBoy
end
```</p>

<p>把 gem 的实现都放在 <code>lib/factory_boy</code> 目录中，然后在 <code>factory_boy.rb</code> 中引入这些文件。注意 <code>factory_boy.rb</code> 中的 <code>require</code> 方法，RubyGems 会正确设置 $LOAD_PATH，确保能找到 <code>lib/factory_boy</code> 目录下的文件。</p>

<p>改好之后需要再次测试一下，这次换另一种测试方法，不需要安装这个 gem。当然在这之前需要用 <code>gem uninstall factory_boy</code> 卸载之前安装的 gem。</p>

<p><code>bash
% irb -Ilib -rfactory_boy
irb(main):001:0&gt; FactoryBoy::VERSION
=&gt; "0.0.2"
irb(main):002:0&gt; FactoryBoy.hi
Hello, I'm a factory boy.
=&gt; nil
</code>
上面的 irb 命令会将 <code>lib</code> 目录加入 $LOAD_PATH，然后执行 <code>require 'factory_boy'</code>，因此进入 irb 就可以直接使用 <code>FactoryBoy</code> 这个模块了。</p>

<p>测试看上去没有问题，这时可以构建新的 gem 了。不过构建之前需要对 <code>.gemspec</code> 文件做一些修改，因为增加了新的源文件，所以 <code>spec.files</code> 这一项必须要修改。每次增加或删除文件都要修改 <code>.gemspec</code> 文件，不仅麻烦，而且容易忘记修改。使用 <code>Dir.[]</code> 方法是一个不错的选择。修改后的 <code>.gemspec</code> 文件如下：</p>

<p>``` ruby factory_boy.gemspec
lib = File.expand_path('../lib', <strong>FILE</strong>)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require 'factory_boy/version'</p>

<p>Gem::Specification.new do |spec|
  spec.name        = 'factory_boy'
  spec.version     = FactoryBoy::VERSION
  spec.date        = '2015-05-16'
  spec.summary     = "I am a factory boy."
  spec.description = "A factory boy want to meet a factory girl."
  spec.authors     = ["Factory Boss"]
  spec.email       = 'fb@example.com'
  spec.files       = Dir['lib/<em>*/</em>']
  spec.homepage    = 'http://fb.example.com'
  spec.license     = 'MIT'
end
```</p>

<p>主要有两方面的修改，第一，使用 <code>Dir['lib/**/*']</code> 获得 <code>lib</code> 目录下的所有文件，这样增加或删除文件时就不需要修改 <code>.gemspec</code> 文件了。第二，gem 的版本通过 <code>factory_boy/version.rb</code> 文件获得，这样保证修改版本时只需修改一处代码即可，满足 DRY 的原则，而且这也是多数 gem 采用的方式。</p>

<h2>增加可执行文件</h2>

<p>gem 除了能提供 Ruby 代码，还可以提供一个或多个可执行文件。比如常见的 <code>rake</code> <code>bundle</code> <code>rails</code> 命令都是对应的 gem 提供的可执行文件。向一个 gem 中添加可执行文件非常简单，只要在 gem 目录中创建可执行文件，然后在 <code>.gemspec</code> 文件中声明就好了。构建 gem 时，会从 <code>spec.bindir</code> 对应的目录中查找 <code>spec.executables</code> 中对应的文件作为可执行文件。 <code>spec.bindir</code> 的默认值是 <code>bin</code> ，但是 Bundler 1.8 <a href="http://bundler.io/blog/2015/03/20/moving-bins-to-exe.html">建议</a>改为 <code>exe</code>，因为 bin 目录是存放 Bundler 的 binstubs 的目录。下面的例子遵循 Bundler 的建议，创建 <code>exe/factory_boy</code> 文件作为可执行文件，同时修改 <code>.gemspec</code> 文件。</p>

<p>``` ruby exe/factory_boy</p>

<h1>!/usr/bin/env ruby</h1>

<p>require 'factory_boy'</p>

<p>FactoryBoy.hi
```</p>

<p>``` ruby factory_boy.gemspec
lib = File.expand_path('../lib', <strong>FILE</strong>)
$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)
require 'factory_boy/version'</p>

<p>Gem::Specification.new do |spec|
  spec.name        = 'factory_boy'
  spec.version     = FactoryBoy::VERSION
  spec.date        = '2015-05-16'
  spec.summary     = "I am a factory boy."
  spec.description = "A factory boy want to meet a factory girl."
  spec.authors     = ["Factory Boss"]
  spec.email       = 'fb@example.com'
  spec.files       = Dir['lib/<em>*/</em>']
  spec.bindir      = 'exe'
  spec.executables = ['factory_boy']
  spec.homepage    = 'http://fb.example.com'
  spec.license     = 'MIT'
end
```</p>

<p>经过这样的修改，<code>gem build</code> 构建出的 gem 就包含了可执行文件，在安装后就可以在命令行中使用了。</p>

<p><code>bash
% gem build factory_boy.gemspec
% gem install ./factory_boy-0.0.2.gem
% factory_boy
Hello, I'm a factory boy.
</code></p>

<h2>增加依赖 gem</h2>

<p>gem 之间是有依赖关系的，如果自己编写的 gem 需要依赖其他 gem，只需在 <code>.gemspec</code> 文件中声明依赖的 gem 名称和版本即可。</p>

<p><code>ruby
  spec.add_dependency 'factory_girl', '~&gt; 4.5'
</code></p>

<p>这样在构建 gem 时依赖关系会保存在 gem 包中，安装时会保证依赖的 gem 已经安装。</p>

<h2>gem 包的文件格式</h2>

<p>gem 包其实是一个 tar 包，用下面的命令可以查看。</p>

<p><code>bash
% file factory_boy-0.0.2.gem
factory_boy-0.0.2.gem: POSIX tar archive
</code></p>

<p>既然是 tar 包，就可以展开查看一下里面的内容。</p>

<p>``` bash
% mkdir tmp
% cd tmp</p>

<p>% tar -xvf ../factory_boy-0.0.2.gem
x metadata.gz
x data.tar.gz
x checksums.yaml.gz
```</p>

<p>可以看到，tar 包里面有三个文件，这三个文件都是用 gzip 压缩过的，其中 <code>checksum.yaml.gz</code> 的内容是另外两个压缩文件的校验和，<code>metadata.gz</code> 的内容是该 gem 的一些元信息，包括 gem 名称、版本、依赖关系等。<code>data.tar.gz</code> 是所有 gem 的文件，安装 gem 时会把这些文件安装到对应路径。</p>

<h2>参考</h2>

<p><a href="http://guides.rubygems.org/make-your-own-gem/">make_your_own_gem</a></p>

<p><a href="http://bundler.io/blog/2015/03/20/moving-bins-to-exe.html">bundler_moves_bins_to_exe</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explore RubyGems 1]]></title>
    <link href="http://teeceepee.github.com/blog/2015/05/12/explore-rubygems-1/"/>
    <updated>2015-05-12T21:58:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2015/05/12/explore-rubygems-1</id>
    <content type="html"><![CDATA[<p>最近对 Ruby 的常用工具的使用以及实现原理产生了兴趣，因为前一阵子发布了一个试验性质的 gem，所以对 gem 相关的东西学习了一下。寻根溯源，找到了一个叫做 RubyGems 的概念。</p>

<h1>Basics</h1>

<p>RubyGems 是什么？这几个字母的组合会在许多地方出现，Gemfile 的第一行一般是 <code>source 'https://rubygems.org'</code> ，对应有一个域名为 rubygems.org 的网站，在一些很多年前的 Ruby 代码中会有 <code>require 'rubygems'</code> 。基本可以确定 rubygems.org 是 RubyGems 的官网，那就从官网入手吧。下面是<a href="http://guides.rubygems.org">官网教程</a>的说法：</p>

<blockquote><p>The RubyGems software allows you to easily download, install, and use ruby software packages on your system. The software package is called a “gem” and contains a package Ruby application or library.</p></blockquote>

<p>所以 RubyGems 是一套软件，这套软件的目标是让用户方便的下载、安装和使用 Ruby 的软件包。同时从这段话中可以看到，在 RubyGems 的范畴内，Ruby 的软件包叫做 gem。当然，有一些 Ruby 使用经验的人都知道还有一个叫 <code>gem</code> 的命令，这个命令当然也是 RubyGems 提供的。<code>gem</code> 命令是 RubyGems 提供的使用接口。RubyGems 需要一个中心服务器存储管理所有的 gem，默认使用的服务器地址就是 https://rubygems.org 。</p>

<h2>被重写的 Kernel#require 方法</h2>

<p><code>Kernel#require</code> 方法是用来干什么的？用来加载 Ruby 代码，它会从全局变量 <code>$LOAD_PATH</code> 中查找对应名字的文件并加载。然而上面的描述在 RubyGems 存在的情况下并不准确。RubyGems 重写了 <code>Kernel#require</code> 方法，扩展了它的功能。</p>

<p>``` ruby kernel_require.rb https://github.com/ruby/ruby/blob/trunk/lib/rubygems/core_ext/kernel_require.rb#L38</p>

<p>  ##
  # When RubyGems is required, Kernel#require is replaced with our own which
  # is capable of loading gems on demand.
  #
  # When you call <tt>require 'x'</tt>, this is what happens:
  # * If the file can be loaded from the existing Ruby loadpath, it
  #   is.
  # * Otherwise, installed gems are searched for a file that matches.
  #   If it's found in gem 'y', that gem is activated (added to the
  #   loadpath).
  #
  # The normal <tt>require</tt> functionality of returning false if
  # that file has already been loaded is preserved.</p>

<p>  def require path</p>

<pre><code># ...
</code></pre>

<p>  end
```</p>

<p>从注释中可以看到，重写后的 <code>Kernel#require</code> 引入文件时会分两步：</p>

<ol>
<li>如果文件能在 $LOAD_PATH 中找到，那就引入它。</li>
<li>否则，在所有已安装的 gem 中查找，如果找到，那么把对应的 gem 激活，也就是把该 gem 的 <code>lib</code> 目录加入 $LOAD_PATH。</li>
</ol>


<p>需要注意的是，<code>require</code> 的参数永远都对应一个文件名（可以省略 <code>.rb</code> 扩展名），而不是 gem 的名字。比如 awesome_print 这个 gem 的 <code>lib</code> 目录是这样的：</p>

<p>``` bash</p>

<p>% tree -L 1 lib                                                              ➜
lib
├── ap.rb
├── awesome_print
└── awesome_print.rb</p>

<p>1 directory, 2 files</p>

<p>```</p>

<p>那么可以用下面的方式引入：</p>

<p><code>ruby
require 'ap'
require 'ap.rb'
require 'awesome_print'
require 'awesome_print.rb'
</code></p>

<p>个人猜测，如果在其他 gem 中有同名的文件，可能会导致错误的引入。为了避免这样的问题，RubyGems 给出了一些命名和目录结构的建议。</p>

<h2>概念</h2>

<ul>
<li>RubyGems，软件包管理软件</li>
<li>gem，RubyGems 中的软件包</li>
<li><code>gem</code>，RubyGems 提供的命令行接口</li>
<li>https://rubygems.org ，RubyGems 的一个中心服务器</li>
</ul>


<h2>参考</h2>

<p><a href="http://guides.rubygems.org">guides</a></p>

<p><a href="http://guides.rubygems.org/rubygems-basics/#requiring-code">requiring_code</a></p>
]]></content>
  </entry>
  
</feed>
