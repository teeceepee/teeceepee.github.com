<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Why Y]]></title>
  <link href="http://teeceepee.github.com/atom.xml" rel="self"/>
  <link href="http://teeceepee.github.com/"/>
  <updated>2015-04-30T12:07:23+08:00</updated>
  <id>http://teeceepee.github.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Explore CarrierWave]]></title>
    <link href="http://teeceepee.github.com/blog/2015/04/26/explore-carrierwave/"/>
    <updated>2015-04-26T20:28:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2015/04/26/explore-carrierwave</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a> 是一个 Ruby 应用的上传组件，很多 Rails 程序都会用到它。与它类似的 gem 还有 PaperClip、Dragonfly 等。因为遇到过的项目都是用 CarrierWave，所以想从零开始学习一下他的使用方法。在 GitHub 上的 master 分支是一个正在开发的版本，下面用的都是 0.10.0 版本。</p>

<p>在 Rails 项目的 Gemfile 中添加 CarrierWave 并执行 <code>bundle install</code> 后就可以使用它了。CarrierWave 提供了一个 generator 来方便的生成 uploader。用法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate uploader Avatar
</span></code></pre></td></tr></table></div></figure>


<p>上面的命令会生成 <code>app/uploaders/avatar_uploader.rb</code> 文件。从文件的路径中可以看出一些 CarrierWave 的约定。所有的 uploader 都放在 <code>app/uploaders</code> 目录下，这个目录不是 Rails 默认有的目录，如果不存在 CarrierWave 会自动创建。所有的 uploader 文件名都以 <code>uploader</code> 结尾，对应的类名也是 <code>XyzUploader</code>。</p>

<p>在 Rails 程序中很少单独使用 uploader，一般都会与 ORM 配合使用。如果使用 ActiveRecord，可以用 <code>mount_uploader</code> 将 uploader 与模型关联。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">mount_uploader</span> <span class="ss">:avatar</span><span class="p">,</span> <span class="no">AvatarUploader</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>mount_uploader</code> 的第一个参数对应数据库的一个字符串类型的字段，用于存储上传文件的文件名，第二个参数是使用的 uploader 类名。</p>

<p>默认生成的 uploader 这样就可以使用了，如果发现不能正常使用的话需要重启服务器。但是在 Rails console 里貌似没有自动加载 <code>app/uploaders</code> 目录下的文件，这样会出现 <code>Uninitialized constant ...</code> 的异常。如果遇到这样的情况又想在 Rails console 中测试，需要在 <code>config/application.rb</code> 中将目录加入到自动加载的列表中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">autoload_paths</span> <span class="o">+=</span> <span class="sx">%W(</span><span class="si">#{</span><span class="n">config</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="sx">/app/uploaders)</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个问题可能是 CarrierWave 的一个 BUG，参考</p>

<p><a href="http://www.codeomnib.us/rails-4-carrierwave-throws-uninitialized-uploader-console/">http://www.codeomnib.us/rails-4-carrierwave-throws-uninitialized-uploader-console/</a>
<a href="https://github.com/carrierwaveuploader/carrierwave/issues/399">https://github.com/carrierwaveuploader/carrierwave/issues/399</a></p>

<h2>存储方式</h2>

<p>CarrierWave 支持多种存储方式，既可以将文件存储在本地的硬盘中，也可以使用各种云存储。CarrierWave 默认生成的 uploader 中有一行 <code>storage :file</code>，表示将文件存在本地硬盘。</p>

<h2>存储目录</h2>

<p>如果使用本地文件的存储方式，需要指定所有上传文件的存储目录。存储目录由 uploader 中的 <code>store_dir</code> 指定，默认生成的 uploader 文件中已经有一个可以使用的 <code>store_dir</code> 方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">store_dir</span>
</span><span class='line'>  <span class="s2">&quot;uploads/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">underscore</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">mounted_as</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">model</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从中可以看出一些 <code>CarrierWave::Uploader::Base</code> 类的一些方法。<code>model</code> 方法表示该 uploader 对应的模型，<code>mounted_as</code> 方法的值就是在模型中使用 <code>mount_uploader</code> 的第一个参数，也就是数据库中对应的字段名。</p>

<h2>扩展名限制</h2>

<p>在实际的上传情景中，可能需要对上传文件的扩展名做一些限制，CarrierWave 提供了白名单和黑名单两种方式，两种方式分别通过 <code>extension_white_list</code> 和 <code>extension_black_list</code> 方法实现。CarrierWave 默认生成的 uploader 在注释中给出了这两个方法的实现方式。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">extension_white_list</span>
</span><span class='line'>    <span class="sx">%w(jpg jpeg gif png)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>方法只要返回允许或拒绝的扩展名数组即可，而且不区分大小写。数组的元素除了可以是字符串，还可以是正则表达式，比如 <code>[/jpe?g/, 'gif', 'png']</code>。</p>

<h2>文件名</h2>

<p>CarrierWave 在保存文件名时会对原始文件名进行修改，默认的行为是只保留英文字符、数字以及 <code>.-+_</code> 四个符号，其他字符会被转化为 <code>_</code>，实现方式在 CarrierWave 源码的 <code>lib/carrierwave/sanitized_file.rb</code> 中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># lib/carrierwave/sanitized_file.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">module</span> <span class="nn">CarrierWave</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">SanitizedFile</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>      <span class="kp">attr_writer</span> <span class="ss">:sanitize_regex</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">sanitize_regex</span>
</span><span class='line'>        <span class="vi">@sanitize_regex</span> <span class="o">||=</span> <span class="sr">/[^a-zA-Z0-9\.\-\+_]/</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sanitize_regexp</span>
</span><span class='line'>      <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:SanitizedFile</span><span class="o">.</span><span class="n">sanitize_regexp</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Sanitize the filename, to prevent hacking</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">sanitize</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\\</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;/&quot;</span><span class="p">)</span> <span class="c1"># work-around for IE</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="n">sanitize_regexp</span><span class="p">,</span><span class="s2">&quot;_&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;_</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="nb">name</span> <span class="o">=~</span> <span class="sr">/\A\.+\z/</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="s2">&quot;unnamed&quot;</span> <span class="k">if</span> <span class="nb">name</span><span class="o">.</span><span class="n">size</span> <span class="o">==</span> <span class="mi">0</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">name</span><span class="o">.</span><span class="n">mb_chars</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>从代码中可以看到，默认使用 <code>/[^a-zA-Z0-9\.\-\+_]/</code> 对文件名进行处理，匹配的字符被替换为 <code>_</code>。同时看到也可以使用其他的正则对文件名进行处理。比如保留原始文件名：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/initializers/carrierwave.rb</span>
</span><span class='line'>
</span><span class='line'><span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:SanitizedFile</span><span class="o">.</span><span class="n">sanitize_regex</span> <span class="o">=</span> <span class="sr">/[^[:word:]\.\-\+]/</span>
</span></code></pre></td></tr></table></div></figure>


<p>创建 <code>config/initializers/carrierwave.rb</code> 文件，写入这行代码 。这是官方文档提供的正则，需要注意的是，这个正则表达式匹配的是所有不允许的字符。</p>

<p>如果想要自定义上传文件的文件名，需要重写 <code>filename</code> 方法。下面的例子参考 CarrierWave 的 Wiki：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PhotoUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">filename</span>
</span><span class='line'>    <span class="s2">&quot;</span><span class="si">#{</span><span class="n">secure_token</span><span class="si">}</span><span class="s2">.</span><span class="si">#{</span><span class="n">file</span><span class="o">.</span><span class="n">extension</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">if</span> <span class="n">original_filename</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">protected</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">secure_token</span>
</span><span class='line'>    <span class="n">var</span> <span class="o">=</span> <span class="ss">:&quot;@</span><span class="si">#{</span><span class="n">mounted_as</span><span class="si">}</span><span class="ss">_secure_token&quot;</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="n">var</span><span class="p">)</span> <span class="ow">or</span> <span class="n">model</span><span class="o">.</span><span class="n">instance_variable_set</span><span class="p">(</span><span class="n">var</span><span class="p">,</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">uuid</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>目前还不太明白为什么要把实例变量存在模型对象而不是 uploader 对象中。但是一定要像例子中那样将 <code>SecureRandom.uuid</code> 的值用实例变量缓存起来，否则数据库中存储的文件名会与本地硬盘中的文件名不同，因为在处理过程中 <code>filename</code> 方法会被多次使用。</p>

<p>需要注意的是 <code>filename</code> 不能返回空字符串，我在尝试的过程中又一次不小心返回空字符串，结果出现了奇怪的错误。看了源码后发现 CarrierWave 的处理方式稍微有些问题。首先，对于重写 <code>filename</code> 返回空字符串或 nil 的做法 CarrierWave 并没有做检查，直接认为是合法的文件名。其次，CarrierWave 会改变上传文件的权限，目录的默认权限是 <code>755</code>，文件的默认权限是 <code>644</code>，这本身没问题，不过当文件名是空字符串或 nil 时，CarrierWave 还是会尝试将文件的权限改为 <code>644</code>，而这时的路径实际上对应的是一个目录。最终的结果就是将目录的执行权限去掉了，没有执行权限的目录是无法进入的，自然会出现一些奇怪的错误，比如 <code>Permission Denied</code> 。与这个问题相关的文件是 <code>lib/carrierwave/uploader/store.rb</code>。</p>

<h2>图片处理</h2>

<p>很多时候需要对上传的图片进行裁剪等处理，然后再保存。CarrierWave 通过 MiniMagick 或 RMagick 来实现对图片的处理。官方推荐使用 MiniMagick，下面的例子也都使用 MiniMagick。</p>

<p>如果使用 MiniMagick，需要在 Gemfile 中将 MiniMagick 包含进来。如果修改了 Gemfile 然后再执行 <code>bundle install</code>，通常都需要重启服务器，Rails 的自动重新加载对 gem 无效。</p>

<p>将 MiniMagick 加入项目之后，只需将默认生成的 uploader 文件中的一行代码取消注释就可以使用图片处理功能了。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Include RMagick or MiniMagick support:</span>
</span><span class='line'>  <span class="c1"># include CarrierWave::RMagick</span>
</span><span class='line'>  <span class="c1"># include CarrierWave::MiniMagick</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># ...</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>CarrierWave::MiniMagick</code> 这个模块包含了几个用于处理图片的方法：</p>

<ul>
<li><code>convert</code> 转换图片格式。</li>
<li><code>resize_to_limit</code> 改变图片的大小，不超过指定的宽高，也就是只对超过限制的图片处理，不会有小图片变大的情况。</li>
<li><code>resize_to_fit</code> 改变图片的大小，适应到指定的宽高，小图片会变大，大图片会变小。</li>
<li><code>resize_to_fill</code> 改变图片的大小，填充到指定的宽高，可能会将比较大的维度裁减掉一部分。</li>
<li><code>resize_and_pad</code> 与 <code>resize_to_fit</code> 类似，不足的部分用指定的颜色填充。</li>
<li><code>manipulate!</code> 比较底层的方法，可以实现对图片的自定义处理，前面的方法都是用该方法实现的。</li>
</ul>


<p>以 resize 开头的四个方法只改变图片的大小，不会改变宽高比，所以用这些方法是不会把图片拉伸的。</p>

<p>要在 uploader 中使用这几个方法来处理图片，要用到类方法 <code>process</code>，根据注释，<code>process</code> 方法本质上是注册一个在文件上传时执行的回调，接受的参数既可以是 uploader 中的方法名或方法名列表，也可以是一个 Hash，Hash 的键是方法名，值是调用方法需要的参数数组。方法的注释和实现如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>    <span class="c1">##</span>
</span><span class='line'>    <span class="c1"># Adds a processor callback which applies operations as a file is uploaded.</span>
</span><span class='line'>    <span class="c1"># The argument may be the name of any method of the uploader, expressed as a symbol,</span>
</span><span class='line'>    <span class="c1"># or a list of such methods, or a hash where the key is a method and the value is</span>
</span><span class='line'>    <span class="c1"># an array of arguments to call the method with</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># === Parameters</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># args (*Symbol, Hash{Symbol =&gt; Array[]})</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1"># === Examples</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#     class MyUploader &lt; CarrierWave::Uploader::Base</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#       process :sepiatone, :vignette</span>
</span><span class='line'>    <span class="c1">#       process :scale =&gt; [200, 200]</span>
</span><span class='line'>    <span class="c1">#       process :scale =&gt; [200, 200], :if =&gt; :image?</span>
</span><span class='line'>    <span class="c1">#       process :sepiatone, :if =&gt; :image?</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#       def sepiatone</span>
</span><span class='line'>    <span class="c1">#         ...</span>
</span><span class='line'>    <span class="c1">#       end</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#       def vignette</span>
</span><span class='line'>    <span class="c1">#         ...</span>
</span><span class='line'>    <span class="c1">#       end</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#       def scale(height, width)</span>
</span><span class='line'>    <span class="c1">#         ...</span>
</span><span class='line'>    <span class="c1">#       end</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#       def image?</span>
</span><span class='line'>    <span class="c1">#         ...</span>
</span><span class='line'>    <span class="c1">#       end</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="c1">#     end</span>
</span><span class='line'>    <span class="c1">#</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">process</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_processors</span> <span class="o">=</span> <span class="n">args</span><span class="o">.</span><span class="n">inject</span><span class="p">({})</span> <span class="k">do</span> <span class="o">|</span><span class="nb">hash</span><span class="p">,</span> <span class="n">arg</span><span class="o">|</span>
</span><span class='line'>        <span class="n">arg</span> <span class="o">=</span> <span class="p">{</span> <span class="n">arg</span> <span class="o">=&gt;</span> <span class="o">[]</span> <span class="p">}</span> <span class="k">unless</span> <span class="n">arg</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Hash</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">hash</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">condition</span> <span class="o">=</span> <span class="n">new_processors</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="ss">:if</span><span class="p">)</span>
</span><span class='line'>      <span class="n">new_processors</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">processor</span><span class="p">,</span> <span class="n">processor_args</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">self</span><span class="o">.</span><span class="n">processors</span> <span class="o">+=</span> <span class="o">[[</span><span class="n">processor</span><span class="p">,</span> <span class="n">processor_args</span><span class="p">,</span> <span class="n">condition</span><span class="o">]]</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到如果键是 <code>:if</code> 会把它当做判断回调是否执行的条件。</p>

<p>有了 <code>CarrierWave::MiniMagick</code> 和 <code>process</code>，二者组合起来就可以实现对上传图片的处理了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">process</span> <span class="ss">convert</span><span class="p">:</span> <span class="s1">&#39;png&#39;</span>
</span><span class='line'>  <span class="n">process</span> <span class="n">resize_to_limit</span><span class="p">:</span> <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="o">]</span>
</span><span class='line'>  <span class="n">process</span> <span class="n">resize_to_fit</span><span class="p">:</span> <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="o">]</span>
</span><span class='line'>  <span class="n">process</span> <span class="n">resize_to_fill</span><span class="p">:</span> <span class="o">[</span><span class="mi">200</span><span class="p">,</span> <span class="mi">200</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>process</code> 可以注册多个回调，不过多次执行改变图片大小的回调会把图片变成什么样就不清楚了。</p>

<p>其实 <code>CarrierWave::MiniMagick</code> 模块中还提供了简化的类方法来实现同样的作用，在网上找到的教程好像都没提到这一点，代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">convert</span> <span class="s1">&#39;png&#39;</span>
</span><span class='line'>  <span class="n">resize_to_limit</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>  <span class="n">resize_to_fit</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'>  <span class="n">resize_to_fill</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">200</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>多版本</h2>

<p>CarrierWave 支持将上传的文件处理成多个版本分别保存，比如生成上传图片的缩略图。在 uploader 中使用 <code>version</code> 方法创建一个新版本，版本可以嵌套。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:thumb</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:foo</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">version</span> <span class="ss">:bar</span>
</span><span class='line'>    <span class="n">version</span> <span class="ss">:baz</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码一共创建了四个版本，分别是 <code>thumb</code>，<code>foo</code>，<code>foo_bar</code>，<code>foo_baz</code>。创建新版本并不会影响默认的文件版本，所以使用上面的 uploader 每次上传会在本地硬盘存储五个文件。</p>

<p>单纯创建版本只会生成多个内容相同的文件，并没有什么作用，只有搭配使用 <code>process</code> 方法才能发挥它的作用。例子如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">AvatarUploader</span> <span class="o">&lt;</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:Uploader</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">CarrierWave</span><span class="p">:</span><span class="ss">:MiniMagick</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">process</span> <span class="n">resize_to_limit</span><span class="p">:</span> <span class="o">[</span><span class="mi">800</span><span class="p">,</span> <span class="mi">800</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">version</span> <span class="ss">:thumb</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">process</span> <span class="n">resize_to_fill</span><span class="p">:</span> <span class="o">[</span><span class="mi">50</span><span class="p">,</span> <span class="mi">50</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样每次上传会生成两个文件，默认版本大小限制在 800x800 像素以内，<code>thumb</code> 版本处理为 50x50 像素。</p>

<h2>参考</h2>

<p><a href="https://github.com/carrierwaveuploader/carrierwave">CarrierWave</a></p>

<p><a href="http://www.codeomnib.us/rails-4-carrierwave-throws-uninitialized-uploader-console/">Uninitialized uploader</a></p>

<p><a href="https://github.com/carrierwaveuploader/carrierwave/issues/399">CarrierWave issue #399</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 jQuery 同步输入框内容]]></title>
    <link href="http://teeceepee.github.com/blog/2015/03/04/jquery-keep-text-inputs-in-sync/"/>
    <updated>2015-03-04T22:08:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2015/03/04/jquery-keep-text-inputs-in-sync</id>
    <content type="html"><![CDATA[<p>前几天在项目中发现有不能正确同步输入框内容的页面，经过上网查找后找到了一种比较好的办法。</p>

<p>要想同步输入框内容，就要监听各种可能使输入框内容发生改变的事件，第一个想到的就是监听键盘输入的事件，与键盘输入相关的事件有 <code>keydown</code>, <code>keypress</code>, <code>keyup</code> 等，<code>keydown</code> 和 <code>keypress</code> 发生在输入框内容改变之前，应该使用 <code>keyup</code> 事件。除了键盘输入外，通过粘贴的方式也会使输入框内容发生变化。 使用键盘快捷键粘贴的方式也会触发 <code>keyup</code> 事件，不过用鼠标右键粘贴的方式不触发 <code>keyup</code> 事件，鼠标右键粘贴会触发 <code>paste</code> 事件，但是该事件发生在输入框内容改变之前，不能正确同步内容。</p>

<p>针对鼠标右键粘贴等方式没有找到太好的办法，只想出了一个折衷的办法：当输入框失去焦点时同步内容，这样虽然不能保持实时同步，但能保证最终同步。输入框失去焦点的事件是 <code>blur</code> 。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Input:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&quot;input-field&quot;</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;br&gt;</span>
</span><span class='line'>  <span class="nt">&lt;label&gt;</span>Output:<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>  <span class="nt">&lt;span</span> <span class="na">id=</span><span class="s">&quot;output-field&quot;</span><span class="nt">&gt;&lt;/span&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;script&gt;</span>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#input-field&#39;</span><span class="p">).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;keyup blur&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;asdf&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#output-field&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">val</span><span class="p">());</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<div>
  <label>Input:</label>
  <input id="input-field" type="text">
  <br>
  <label>Output:</label>
  <span id="output-field"></span>
</div>


<script>
  $('#input-field').on('keyup blur', function() {
    console.log('asdf');
    $('#output-field').text($(this).val());
  });
</script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Redis Database Number]]></title>
    <link href="http://teeceepee.github.com/blog/2015/02/14/redis-db-number/"/>
    <updated>2015-02-14T22:00:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2015/02/14/redis-db-number</id>
    <content type="html"><![CDATA[<p>Redis 使用 DB number 实现类似关系型数据库中 schema 的功能。不同 DB number 表示的数据库是隔离的，但是目前只能使用数字来表示一个数据库，Ubuntu 默认的配置文件配置了16个数据库，DB number 是从0开始的，并且默认连接0号数据库。</p>

<h3>使用命令行连接其他数据库</h3>

<p>可以使用 <code>-n</code> 选项指定连接的数据库号。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli -n &lt;dbnumber&gt;
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>redis-cli -n 2
</span><span class='line'>127.0.0.1:6379<span class="o">[</span>2<span class="o">]</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>如果已经执行 <code>redis-cli</code> 进入了 Redis 控制台，可以使用 <code>SELECT</code> 命令选择其他数据库。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1:6379&gt; SELECT 1
</span><span class='line'>OK
</span><span class='line'>127.0.0.1:6379<span class="o">[</span>1<span class="o">]</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<p>在 Redis 控制台中，如果当前连接的不是0号数据库，提示符中会在方括号内显示当前连接的数据库号。</p>

<h3>使用URL连接其他数据库</h3>

<p>在连接 URL 后面添加数据库号即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis://127.0.0.1:6379/&lt;dbnumber&gt;
</span><span class='line'>
</span><span class='line'>redis://127.0.0.1:6379/1
</span></code></pre></td></tr></table></div></figure>


<h3>连接到不存在的数据库号</h3>

<p>在命令行中，如果指定的数据库号超出了配置文件中的范围，貌似都会连接到0号数据库。使用 <code>redis-cli -n 10000</code> 这样的方式连错误都没有提示，而在Redis控制台中用 <code>SELECT 10000</code> 这样的方式会有错误提示，不过依然可以正常使用。不知道这算不算是 BUG。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>redis-cli -n 10000
</span><span class='line'>127.0.0.1:6379<span class="o">[</span>10000<span class="o">]</span>&gt;
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>127.0.0.1:6379&gt; SELECT 10000
</span><span class='line'><span class="o">(</span>error<span class="o">)</span> ERR invalid DB index
</span><span class='line'>127.0.0.1:6379<span class="o">[</span>10000<span class="o">]</span>&gt; <span class="nb">set </span>number 10000
</span><span class='line'>OK
</span><span class='line'>127.0.0.1:6379<span class="o">[</span>10000<span class="o">]</span>&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Swift Tour 笔记]]></title>
    <link href="http://teeceepee.github.com/blog/2015/02/06/a-swift-tour-note/"/>
    <updated>2015-02-06T23:06:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2015/02/06/a-swift-tour-note</id>
    <content type="html"><![CDATA[<p>最近看完了 The Swift Programming Language 中的 A Swift Tour 一节，对 Swift 有了一点初步的了解，在此记录一下学习过程中遇到的一些问题。</p>

<h2>可变参数列表</h2>

<p>Swift 的函数可以接受多个参数，把它们收集到一个数组中。这本来应该是一个不错的语言特性，但是在写对应的 experiment 时就发现问题了，Swift 只能把多个参数收集到数组中，却不能将一个数组打散成多个参数。Ruby 中可以用 <code>sumOf(*numbers)</code> 这样的方式实现将数据打散成多个参数，Swift 目前没有这样的功能，所以无法用下面的代码实现 <code>average</code> 函数。如果实在想用 <code>sumOf</code> 函数来实现 <code>average</code>，那只能将 <code>sumOf</code> 的参数改为数组类型的。只能期待Swift能在以后实现这样的功能了，目前来说尽量少用这样的蹩脚的语言特性吧。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>func sumOf(numbers: Int...) -&gt; Int {
</span><span class='line'>    var sum = 0
</span><span class='line'>    for number in numbers {
</span><span class='line'>        sum += number
</span><span class='line'>    }
</span><span class='line'>    return sum
</span><span class='line'>}
</span><span class='line'>sumOf()
</span><span class='line'>sumOf(42, 597, 12)
</span><span class='line'>
</span><span class='line'>func average(numbers: Int...) -&gt; Double {
</span><span class='line'>    let count = numbers.count
</span><span class='line'>    // The code below do not work!
</span><span class='line'>    // let avg = sumOf(*numbers) / count
</span><span class='line'>    return avg
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>枚举类型遍历</h2>

<p>Swift 可以使用 <code>enum</code> 定义枚举类型，但是目前貌似没有非常方便的方法返回所有的枚举值。希望以后能添加这样的方法吧。</p>

<h2>命名空间</h2>

<p>Swift 有命名空间的功能，不过很少有地方提到。在解决下面与命名空间有关的一个问题时找到了 Lattner 大神的 Twitter，提到了显式使用命名空间。链接：<a href="https://twitter.com/clattner_llvm/status/474772713739792384">Chris Lattner suggests</a></p>

<p>与命名空间有关的问题代码如下：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>extension Int {
</span><span class='line'>
</span><span class='line'>    func restrictToRange(#minValue: Int, maxValue: Int) -&gt; Int {
</span><span class='line'>        var ret: Int
</span><span class='line'>
</span><span class='line'>        // 'Int' does not have a member named 'min'
</span><span class='line'>        //ret  = min(max(self, minValue), maxValue)
</span><span class='line'>
</span><span class='line'>        // use explicit namespace
</span><span class='line'>        ret = Swift.min(Swift.max(self, minValue), maxValue)
</span><span class='line'>        return ret
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>我想用 <code>extension</code> 向 <code>Int</code> 中添加一个方法，在其中用到了 <code>min</code> 和 <code>max</code> 两个全局函数，但是直接使用会有 <code>'Int' does not have a member named 'min'</code> 这样的错误提示，在函数名前加上显式的命名空间 <code>Swift</code> 后问题解决，但是引起该错误的原因没有找到，可能与作用域和符号查找有关吧，希望在以后能找出该问题的具体原因。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OSX 中挂载 NTFS 分区]]></title>
    <link href="http://teeceepee.github.com/blog/2015/01/26/mount-ntfs-partition-as-writable-in-osx/"/>
    <updated>2015-01-26T22:29:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2015/01/26/mount-ntfs-partition-as-writable-in-osx</id>
    <content type="html"><![CDATA[<p>我的移动硬盘是在用 Mac 之前买的，格式化为 NTFS 格式，可以在 Windows 和 Linux 中正常使用。换用 Mac 后，一开始只是从移动硬盘中读文件，没发觉有什么问题，一度以为网上说的 OSX 不支持 NTFS 的说法是针对老版本。直到又一次想要向移动硬盘中存文件，发现连新建目录都不行，这才了解到 OSX 默认把 NTFS 分区挂载为只读。</p>

<p>原来 OSX 从 Snow Leopard 开始就内置了对 NTFS 分区的读写支持，但是默认将 NTFS 分区挂载为只读分区，具体原因不详。既然是内置读写支持，那就有办法将 NTFS 分区挂载为可读可写的分区。</p>

<p>实现这个功能的命令是 <code>/sbin/mount_ntfs</code>，系统在实现移动硬盘自动挂载功能时也是间接使用该命令，所以网上有修改该文件来实现自动挂载为可读可写分区的方法。个人觉得修改系统原文件不是一个很好的方法，没有采用。不过也学到了使用该命令的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mount_ntfs -o rw,nobrowse DEVICE MOUNT_POINT
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>DEVICE</code> 是硬盘分区对应的设备文件， 比如 <code>/dev/disk2s1</code>，<code>MOUNT_POINT</code> 是挂载点，比如 <code>/Volumes/data</code>。通过 <code>-o rw,nobrowse</code> 这样的参数，可以将 NTFS 分区挂载为可读可写分区，其中的 <code>rw</code> 顾名思义，<code>nobrowse</code> 表示不在桌面和 Finder 中显示。不在桌面和 Finder 中显示很不方便，于是尝试只是用 <code>-o rw</code> 这样的参数，挂载的分区出现在了桌面和 Finder中，但是依然是只读分区，尝试失败。可能是系统做了限制，挂载为可读可写分区时不允许在桌面和 Finder 中显示。目前我的做法是将 <code>/Volumes</code> 目录放到 Finder 的个人收藏中，然后手动挂载分区到这个目录下的某个子目录。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install Emacs on OSX]]></title>
    <link href="http://teeceepee.github.com/blog/2014/12/06/install-emacs-on-osx/"/>
    <updated>2014-12-06T16:24:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2014/12/06/install-emacs-on-osx</id>
    <content type="html"><![CDATA[<p>原来在 Linux 和 Windows 系统都是用 Emacs，换了 MacBook Pro 后就考虑如何在 OSX 上安装 Emacs。其实 OSX 默认就安装了 Emacs，只不过版本太老，还是22的，而且貌似没有图形界面，所以还是需要安装新版本的有图形界面的Emacs。OSX 上貌似有好几种 Emacs，因为我使用 Homebrew 管理软件包，所以选择了用 Homebrew 安装 Emacs。在这里记录一下安装配置时遇到的问题。</p>

<h2>使用 Homebrew 安装 Emacs</h2>

<p>Homebrew 有 Emacs 的 formula，那就像其他软件一样安装吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="c"># Do not use this command, it does not work well!</span>
</span><span class='line'>brew install emacs
</span></code></pre></td></tr></table></div></figure>


<p>通过命令行的输出可以看到 Homebrew 默认选择 bottle 的方式安装 Emacs，bottle 方式就是直接下载已经编译好的软件包。一会儿安装完成，赶紧在命令行输入 <code>emacs --version</code>，确认是版本是新的，以为大功告成了。但是找了半天没找到怎么启动图形界面的 Emacs，遂上网查找问题。查找的结果是用上面的命令安装的 Emacs 只能在终端使用，根本就没有图形界面。想用图形界面，只能用编译的方式安装 Emacs。命令如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install emacs --cocoa
</span></code></pre></td></tr></table></div></figure>


<p>这样就会编译 Cocoa 版本的 Emacs，也就是有图形界面的。在写这篇文章时，Homebrew 中的 Emacs 版本为 24.4，安装这个版本不需要再加 <code>--srgb</code> 选项，貌似已经是默认行为，不需要写在命令中了。网上查到的资料大多都有 <code>--srgb</code> 选项，是24.4版本之前需要的选项，现在已经不需要了。</p>

<p>安装完后仍然是不能直接启动图形界面的，需要做一个符号链接。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ln -s /usr/local/Cellar/emacs/24.4/Emacs.app /Applications/Emacs.app
</span></code></pre></td></tr></table></div></figure>


<p>需要注意链接的路径，如果修改了 Homebrew 的安装路径，需要修改成对应的。到此，终于大功告成了。</p>

<h2>修改 Emacs 修饰键</h2>

<p>MacBook Pro 的键盘有一点让我非常不习惯，Control 键竟然只有一个！Command、Option、Shift 键都有两个，Control 键竟然只在左边有，右边的位置被方向键霸占了。OSX 的快捷键大多以 Command 开头，影响不大，但是 Emacs 可是大量使用 Control 键啊。原来的解决方案是使用外接键盘，现在不用外接键盘了，只能考虑其他方式了。用 Command 代替 Control 的功能是个不错的方法，经过上网查找，找到了几个 Emacs 的变量，可以实现该功能，只需添加下面的代码到配置文件即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='cl'><span class='line'><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nb">eq</span> <span class="nv">system-type</span> <span class="ss">&#39;darwin</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>      <span class="c1">;(setq mac-control-modifier &#39;super)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">setq</span> <span class="nv">mac-command-modifier</span> <span class="ss">&#39;control</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>system-type</code> 变量表示当前系统类型，<code>darwin</code> 表示 OSX，<code>mac-command-modifier</code> 变量表示按下 Command 键输入哪个前缀。注释掉的那一行表示，用 Control 键实现原来 Command 键的功能，因为发生过误操作，所以注释不用了。</p>

<h2>总结</h2>

<p>这篇文章介绍了如何用 Homebrew 安装有图形界面的 Emacs，安装版本为24.4。原来安装过24.3版本的，有一个非常严重的BUG，一旦触发用 x-popup-dialog 打开的对话框，整个 Emacs 就没有响应了，只能通过系统的强制退出功能关掉程序。这其中就包括 <code>cmd + p</code> 这样的组合键，有时想按 <code>ctrl +p</code>，结果按成了 <code>cmd + p</code>，弹出和打印有关的对话框，然后整个 Emacs 就没有响应了，这也是更改 Command 键的功能的部分原因。现在重新安装了24.4，BUG没有了，使用起来更顺畅了。</p>

<h2>参考</h2>

<p><a href="http://emacsredux.com/blog/2014/01/11/a-peek-at-emacs-24-dot-4-srgb-colours-on-os-x/">http://emacsredux.com/blog/2014/01/11/a-peek-at-emacs-24-dot-4-srgb-colours-on-os-x/</a></p>

<p><a href="http://stackoverflow.com/questions/1817257/how-to-determine-operating-system-in-elisp">http://stackoverflow.com/questions/1817257/how-to-determine-operating-system-in-elisp</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Explore ActiveSupport 1]]></title>
    <link href="http://teeceepee.github.com/blog/2014/11/15/explore-active-support-1/"/>
    <updated>2014-11-15T20:57:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2014/11/15/explore-active-support-1</id>
    <content type="html"><![CDATA[<p>Ruby on Rails 框架的 Active Support 组件提供了很多方便使用的方法，有些方法是通过 Monkey Patch 的方式添加到 Ruby 原有的类中的。</p>

<h2>Object#blank?</h2>

<p>只截取了主要部分的代码。看过源码后发现，#blank? 不仅添加到 Object 类，还添加到了 NilClass，FalseClass，TrueClass，String，Numeric，Array，Hash 等类中。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File activesupport/lib/active_support/core_ext/object/blank.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">blank?</span>
</span><span class='line'>    <span class="nb">respond_to?</span><span class="p">(</span><span class="ss">:empty?</span><span class="p">)</span> <span class="p">?</span> <span class="o">!!</span><span class="n">empty?</span> <span class="p">:</span> <span class="o">!</span><span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">String</span>
</span><span class='line'>  <span class="no">BLANK_RE</span> <span class="o">=</span> <span class="sr">/\A[[:space:]]*\z/</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">blank?</span>
</span><span class='line'>    <span class="no">BLANK_RE</span> <span class="o">===</span> <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>判断一个对象是否是空白的。空白的定义是如果一个对象是 false，empty 或空白字符，那么就是空白的。比较的特殊的是对 String 类的处理，只有零个或多个空格字符的字符串都认为是空白的。根据注释，制表符换行符等都算作空白字符，还支持 Unicode 的空白字符。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s1">&#39;&#39;</span><span class="o">.</span><span class="n">blank?</span>       <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="s1">&#39;   &#39;</span><span class="o">.</span><span class="n">blank?</span>    <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="s2">&quot;</span><span class="se">\t\n\r</span><span class="s2">&quot;</span><span class="o">.</span><span class="n">blank?</span> <span class="c1"># =&gt; true</span>
</span><span class='line'><span class="s1">&#39; blah &#39;</span><span class="o">.</span><span class="n">blank?</span> <span class="c1"># =&gt; false</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Unicode whitespace is supported:</span>
</span><span class='line'><span class="s2">&quot;\u00a0&quot;</span><span class="o">.</span><span class="n">blank?</span> <span class="c1"># =&gt; true</span>
</span></code></pre></td></tr></table></div></figure>


<p>所有的数字都不是空白的，因为向 Numeric 类添加的 blank? 方法永远返回 false。</p>

<h2>Object#present?</h2>

<p><code>Object#present?</code>非常常用，实现非常简单，所有不是空白的对象都返回 true。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">present?</span>
</span><span class='line'>  <span class="o">!</span><span class="n">blank?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>ActiveSupport::HashWithIndifferentAccess</h2>

<p>随着 Ruby 版本的发展，String 和 Symbol 对象的差别越来越小，在 Ruby 和 Rails 中很多时候都是可以混用的，但是有一个地方是不能混用的，那就是 Hash 的键。<code>:foo.hash != 'foo'.hash</code>，Active Support 中的 HashWithIndifferentAccess 类就是解决这个问题的。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># File activesupport/lib/active_support/hash_with_indifferent_access.rb</span>
</span><span class='line'><span class="n">rgb</span> <span class="o">=</span> <span class="ss">ActiveSupport</span><span class="p">:</span><span class="ss">:HashWithIndifferentAccess</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="n">rgb</span><span class="o">[</span><span class="ss">:black</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;#000000&#39;</span>
</span><span class='line'><span class="n">rgb</span><span class="o">[</span><span class="ss">:black</span><span class="o">]</span>  <span class="c1"># =&gt; &#39;#000000&#39;</span>
</span><span class='line'><span class="n">rgb</span><span class="o">[</span><span class="s1">&#39;black&#39;</span><span class="o">]</span> <span class="c1"># =&gt; &#39;#000000&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">rgb</span><span class="o">[</span><span class="s1">&#39;white&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;#FFFFFF&#39;</span>
</span><span class='line'><span class="n">rgb</span><span class="o">[</span><span class="ss">:white</span><span class="o">]</span>  <span class="c1"># =&gt; &#39;#FFFFFF&#39;</span>
</span><span class='line'><span class="n">rgb</span><span class="o">[</span><span class="s1">&#39;white&#39;</span><span class="o">]</span> <span class="c1"># =&gt; &#39;#FFFFFF&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>好了，再也不用担心搞错了，不过这名字也太长了。Active Support还添加了<code>Hash#with_different_access</code>方法，可以通过已有的 Hash 对象转化。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rgb</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">black</span><span class="p">:</span> <span class="s1">&#39;#000000&#39;</span><span class="p">,</span> <span class="ss">white</span><span class="p">:</span> <span class="s1">&#39;#FFFFFF&#39;</span> <span class="p">}</span><span class="o">.</span><span class="n">with_indifferent_access</span>
</span></code></pre></td></tr></table></div></figure>


<p>算是短一点了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用libreadline6.3编译Ruby]]></title>
    <link href="http://teeceepee.github.com/blog/2014/05/19/build-ruby-with-libreadline-6-dot-3/"/>
    <updated>2014-05-19T21:22:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2014/05/19/build-ruby-with-libreadline-6-dot-3</id>
    <content type="html"><![CDATA[<p>Debian unstable版的软件包一般都很新，但是想尝试最新的ruby，还是不能依赖操作系统的升级。原来一直不太想用RVM、rbenv等工具，觉得系统自带的ruby足够了。现在想要尝试新版本了，就只能尝试一下了，顺便学习一下这些工具的使用。</p>

<p>原来曾经尝试过rbenv，感觉还不错，又听到过一些RVM负面的信息，所以决定还是从rbenv入手。rbenv的安装很简单，按照官网的README来就好。所有的文件都安装在 <code>~/.rbenv/</code>目录中，还是比较好管理的。当时做得比较急，安装完成就准备安装ruby，但是tab了半天也没出<code>install</code>这个子命令。咋回事儿？继续看README吧，原来把编译安装ruby的功能做成了插件，需要单独安装。安装好后，终于有<code>install</code>子命令了，挑个比较新的版本，走起。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rbenv install 2.1.1
</span></code></pre></td></tr></table></div></figure>


<p>当时的网速不太好，历尽千辛万苦，终于下载完了。解压、编译，然后等来的是一个编译错误。rbenv把所有的临时文件全部删除了，只留下一个日志文件。初看这个日志文件，貌似与OpenSSL相关，因为日志的最后几行确实有OpenSSL的痕迹。但仔细查看日志，发现上面几行才是出错的真正原因，在日志中有类似下面的两行：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>ext/readline/all<span class="o">]</span> 错误 2
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** 正在等待未完成的任务....
</span></code></pre></td></tr></table></div></figure>


<p>也就是说下面的应该是正常输出，是因为上面出错了才停止的。造成编译错误的罪魁祸首是这两行上面的日志：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>make<span class="o">[</span>2<span class="o">]</span>: Entering directory <span class="sb">`</span>/tmp/ruby-build.20140519215343.7209/ruby-2.0.0-p451/ext/readline<span class="s1">&#39;</span>
</span><span class='line'><span class="s1">compiling readline.c</span>
</span><span class='line'><span class="s1">readline.c: In function ‘Init_readline’:</span>
</span><span class='line'><span class="s1">readline.c:1886:26: error: ‘Function’ undeclared (first use in this function)</span>
</span><span class='line'><span class="s1">     rl_pre_input_hook = (Function *)readline_pre_input_hook;</span>
</span><span class='line'><span class="s1">                          ^</span>
</span><span class='line'><span class="s1">readline.c:1886:26: note: each undeclared identifier is reported only once for each function it appears in</span>
</span><span class='line'><span class="s1">readline.c:1886:36: error: expected expression before ‘)’ token</span>
</span><span class='line'><span class="s1">     rl_pre_input_hook = (Function *)readline_pre_input_hook;</span>
</span><span class='line'><span class="s1">                                    ^</span>
</span><span class='line'><span class="s1">readline.c: At top level:</span>
</span><span class='line'><span class="s1">readline.c:530:1: warning: ‘readline_pre_input_hook’ defined but not used [-Wunused-function]</span>
</span><span class='line'><span class="s1"> readline_pre_input_hook(void)</span>
</span><span class='line'><span class="s1"> ^</span>
</span><span class='line'><span class="s1">make[2]: *** [readline.o] 错误 1</span>
</span><span class='line'><span class="s1">make[2]: Leaving directory `/tmp/ruby-build.20140519215343.7209/ruby-2.0.0-p451/ext/readline&#39;</span>
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** <span class="o">[</span>ext/readline/all<span class="o">]</span> 错误 2
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: *** 正在等待未完成的任务....
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<p>从上面的错误日志中可以发现，编译错误是在编译ext/readline/readline.c时，1886行的<code>Function</code>未声明造成的。上网搜索关键字<code>rbenv readline Function</code>，发现这还不是个别现象，应该算是ruby的一个BUG。问题的根本原因是ruby依赖的libreadline库从6.2升级到6.3时，将<code>Function</code>的typedef去掉了，但ruby使用libreadline的代码中还存在对<code>Function</code>的使用，因此就出现了符号未声明的编译错误。找到了问题的根源，修复的措施就简单了，使用libreadline新风格的typedef，将<code>Function</code>替换成<code>rl_hook_func_t</code>就行了。</p>

<p>rbenv除了可以用<code>rbenv install</code>来自动编译安装ruby外，也可以手动编译，最后安装到<code>~/.rbenv/versions/</code>对应版本的目录中。比如2.1.1版本的ruby，在configure时添加<code>--prefix=~/.rbenv/versions/2.1.1</code>即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>./configure --prefix<span class="o">=</span>~/.rbenv/versions/2.1.1
</span><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>make check
</span><span class='line'><span class="nv">$ </span>make install
</span></code></pre></td></tr></table></div></figure>


<p>在查找这一问题时，通过ruby的版本控制系统，还发现了一些比较有趣的东西。这才是本文的重点。:)
Ruby有自己的独立版本库，使用的应该是svn，不过在GitHub上有镜像版本库，提交日志是基本相同的。因为比较熟悉GitHub，下面描述的提交日志都来自GitHub。</p>

<p>关于该问题的代码修改都在<a href="https://github.com/ruby/ruby/tree/trunk/ext/readline">ext/readline目录</a>中，看一下与该目录有关的<a href="https://github.com/ruby/ruby/commits/trunk/ext/readline">提交日志</a>，哇，从2014年3月1日到2014年4月4日，总共用了5次提交才比较好的修复了本问题。依次浏览这五次提交，看看到底是怎么会事儿。</p>

<p>2014年3月1日，提交<a href="https://github.com/ruby/ruby/commit/ed6a2d3bf695c8781cd27b86c39c1151b57f36f4#diff-41839e3cfd5979f00c2a767307b6e0c6">ed6a2d3bf6</a>，修改了<code>ext/readline/readline.c</code>。修正方法与我上面描述的相同，就是把<code>Function</code>换成了<code>rl_hook_func_t</code>，貌似问题解决。</p>

<p>2014年3月2日，前一天刚修复了BUG，怎么又有针对同一问题的提交，而且一天就提交了两次？第一次提交<a href="https://github.com/ruby/ruby/commit/2bb881148493651c577d95d55a4571c36de589b6#diff-41839e3cfd5979f00c2a767307b6e0c6">2bb8811484</a>，<code>rl_hook_func_t for old readline</code>。好吧，前一天的修改简单的改了类型名，没有考虑向前兼容老版本的readline，从提交信息看是这样的。修正方法也比较简单，就是判断一下有没有<code>rl_hook_func_t</code>这个类型，没有的话就通过宏定义将<code>rl_hook_func_t</code>替换成<code>Function</code>。第二次提交<a href="https://github.com/ruby/ruby/commit/083bf237596abd7b317bc891c5b6d766f299c62e#diff-41839e3cfd5979f00c2a767307b6e0c6">083bf23759</a>,添加了针对上一次提交的注释。难道是修改得太急，改了问题，忘了用注释解释一下？</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>+  <span class="c"># rl_hook_func_t is available since readline-4.2 (2001).</span>
</span><span class='line'>+  <span class="c"># Function is removed at readline-6.3 (2014).</span>
</span><span class='line'>+  <span class="c"># However, editline (NetBSD 6.1.3, 2014) doesn&#39;t have rl_hook_func_t.</span>
</span></code></pre></td></tr></table></div></figure>


<p>貌似是为了兼容NetBSD的editline库，那第一次提交里提到的for old readline就不太准确了。也就是说第二次提交可能是为了补救上一次提交出现的歧义。</p>

<p>但仍然没有结束。2014年3月31日，提交<a href="https://github.com/ruby/ruby/commit/664813677963792e2ad36ef9370107dc41c7f27b#diff-41839e3cfd5979f00c2a767307b6e0c6">6648136779</a>，<code>fix typo</code>，哦，是<code>$defs</code>而不是<code>$DEFS</code>，但为什么过了将近一个月才发现？</p>

<p>2014年4月4日，提交<a href="https://github.com/ruby/ruby/commit/d2a8e28597df946842f44d6e0d2cbfe98863b877#diff-41839e3cfd5979f00c2a767307b6e0c6">d2a8e28597</a>，不是检查<code>rl_hook_func_t</code>而应该检查<code>rl_hook_func_t*</code>。我的疑问与上一次提交一样，为什么过了一个月才发现？</p>

<p>通过对这一系列提交的追溯，我们发现是不是有些似曾相识？在修正BUG的时候不小心又引入了新的BUG，然后再修正新BUG，然后因为匆忙修正的不彻底。类似这样的问题有很多，如何才能在开发过程中尽量避免？Ruby的代码是有单元测试的，但是在不同库版本、不同操作系统的环境中单元测试的结果可能是不同的。我猜测单元测试可能只在比较主流的环境中运行，相当于跳过了这些兼容的代码，因此也就没有及时发现问题，导致一个BUG花了一个月才彻底解决。</p>

<p>PS：Ruby 2.1.2已经合并了这些修改，编译2.1.2不需要再手动修改代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debian禁用不必要的开机自启动服务]]></title>
    <link href="http://teeceepee.github.com/blog/2013/12/30/remove-unnecessary-auto-start-services/"/>
    <updated>2013-12-30T20:00:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2013/12/30/remove-unnecessary-auto-start-services</id>
    <content type="html"><![CDATA[<p>经常为了尝试安装各种软件，比如Mongodb、Redis、Nginx等，但实际上用到的时候不多。这些软件都是用apt-get方式安装的，安装完默认都是开机启动的，慢慢开始影响开机启动的速度了。不让他们自启动可以直接去/etc/rc?.d修改，把S改成K就可以，但是手动改太麻烦了。Debian有一个命令，但是每次改都要现查，老是记不住。写一篇博客加深一下印象吧。</p>

<p>这个命令是<code>update-rc.d</code>，看名字就知道是修改rc?.d的。根据<code>man update-rc.d</code>，用法如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>update-rc.d <span class="o">[</span>-n<span class="o">]</span> <span class="o">[</span>-f<span class="o">]</span> name remove
</span><span class='line'>
</span><span class='line'>update-rc.d <span class="o">[</span>-n<span class="o">]</span> name defaults
</span><span class='line'>
</span><span class='line'>update-rc.d <span class="o">[</span>-n<span class="o">]</span> name
</span><span class='line'>
</span><span class='line'>update-rc.d <span class="o">[</span>-n<span class="o">]</span> name disable|enable <span class="o">[</span> S|2|3|4|5 <span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>用到的是最后一个，如果最后面的运行级别不指定则修改所有级别。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># 禁止Redis开机启动</span>
</span><span class='line'>sudo update-rc.d redis-server disable
</span><span class='line'><span class="c"># Redis开机启动</span>
</span><span class='line'>sudo update-rc.d redis-server <span class="nb">enable</span>
</span></code></pre></td></tr></table></div></figure>


<p>写这篇博客时顺便学会了一个查看所有服务运行状态的命令，+表示正在运行，-表示没有运行，?表示不详（？），可能是不支持用status查询状态吧。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service --status-all
</span><span class='line'><span class="c"># ==&gt;</span>
</span><span class='line'> <span class="o">[</span> + <span class="o">]</span>  acpi-fakekey
</span><span class='line'> <span class="o">[</span> - <span class="o">]</span>  acpi-support
</span><span class='line'> <span class="o">[</span> + <span class="o">]</span>  acpid
</span><span class='line'> <span class="o">[</span> ? <span class="o">]</span>  alsa-utils
</span><span class='line'> <span class="o">[</span> - <span class="o">]</span>  anacron
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[安装docker并手工构建一个image]]></title>
    <link href="http://teeceepee.github.com/blog/2013/12/28/install-docker-and-build-an-image/"/>
    <updated>2013-12-28T20:40:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2013/12/28/install-docker-and-build-an-image</id>
    <content type="html"><![CDATA[<p>最近貌似docker这玩意儿比较火，有可能是虚拟化的新趋势。比较感兴趣，正好有时间就玩了玩，遇到一些问题就记下来了。</p>

<p><a href="https://www.docker.io">docker</a>的官网做得不错，对于新手能很方便的找到所需信息。最让人喜欢的是那个<a href="https://www.docker.io/gettingstarted/">Get started!</a>交互式命令行教程，简直就是“手把手得教，一对一得学”。通过<code>docker version</code>、<code>docker search tutorial</code>等一步步深入，看完教程就能熟悉个大概了。</p>

<p>首先是安装docker。我的系统是Debian unstable，官方有Ubuntu的安装教程，我是按照Ubuntu的教程来的，但是并没有执行<code>sudo apt-get install linux-image-extra-\</code>uname -r&#8220;，因为Debian貌似没有linux-image-extra-*这个软件包。安装docker只用下面几行命令即可。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo sh -c <span class="s2">&quot;wget -qO- https://get.docker.io/gpg | apt-key add -&quot;</span>
</span><span class='line'>
</span><span class='line'>sudo sh -c <span class="s2">&quot;echo deb http://get.docker.io/ubuntu docker main &gt; /etc/apt/sources.list.d/docker.list&quot;</span>
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install lxc-docker
</span></code></pre></td></tr></table></div></figure>


<p>安装好docker我就按<a href="https://www.docker.io/gettingstarted/">Get started!</a>的命令操作，但不凑巧的是我在本机执行这些命令时可没有在线教程那么顺利，<code>docker pull ubuntu</code>并不能正常下载image，卡了一会儿输出个错误，超时了。原因猜也能猜个差不多，只能说句“F*K GFW”然后找其他办法了。还好我有个VPN，连上VPN，再试，结果还是不行，错误信息和不连VPN的还不太一样，具体原因还不清楚，再找其他解决方案吧。最终在一篇<a href="http://www.blogjava.net/yongboy/archive/2013/12/12/407498.html">博客</a>的评论里找到了一种解决方案，有一点麻烦，但确实可行。</p>

<p>这个解决方案就是自己在本地构建一个image，然后导入到docker中，最终就和用<code>docker pull</code>从远程下载的效果一样了。该方案只能在Debian或Ubuntu上操作，制作的image也只能是Debian或Ubuntu。</p>

<p>首先，确认已经安装了<code>debootstrap</code>这个工具，如果没安装用下面命令安装。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install debootstrap
</span></code></pre></td></tr></table></div></figure>


<p><code>debootstrap</code>貌似是一个构建Debian系统的工具，可以从指定的源获取deb安装包并安装。过程应该和安装系统差不多，只不过是将文件都安装到某一个目录下。根据<code>man debootstrap</code>，用法如下，用一句话解释就是：&#8221;debootstrap  bootstraps a basic Debian system of SUITE into TARGET from MIRROR by running SCRIPT.&#8221;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>debootstrap <span class="o">[</span>OPTION...<span class="o">]</span>  SUITE TARGET <span class="o">[</span>MIRROR <span class="o">[</span>SCRIPT<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>TARGET</code>这里应该是写一个路径，最终构建的系统就在这个路径中。如果该路径不存在会自动创建。</p>

<p><code>MIRROR</code>指定deb包的获取路径，与<code>sources.list</code>文件中写的路径一样，比如<code>http://mirrors.sohu.com/ubuntu/</code></p>

<p><code>SUITE</code>是一个名字，起初我以为可以随便写，经过测试发现必须与<code>/usr/share/debootstrap/scripts/</code>目录中的文件名对应，并且需要与MIRROR对应，下面有说明。在我的机器上这个目录有如下内容：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ls /usr/share/debootstrap/scripts/
</span><span class='line'>breezy            intrepid          potato            stable
</span><span class='line'>dapper            jaunty            precise           testing
</span><span class='line'>edgy              jessie            quantal           trusty
</span><span class='line'>etch              karmic            raring            unstable
</span><span class='line'>etch-m68k         lenny             sarge             warty
</span><span class='line'>feisty            lucid             sarge.buildd      warty.buildd
</span><span class='line'>gutsy             maverick          sarge.fakechroot  wheezy
</span><span class='line'>hardy             natty             saucy             woody
</span><span class='line'>hoary             oldstable         sid               woody.buildd
</span><span class='line'>hoary.buildd      oneiric           squeeze
</span></code></pre></td></tr></table></div></figure>


<p>显然，<code>SUITE</code>这一项只能写Debian或Ubuntu的代号。否则错误提示为：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo debootstrap abc target http://mirrors.sohu.com/ubuntu
</span><span class='line'>E: No such script: /usr/share/debootstrap/scripts/abc
</span></code></pre></td></tr></table></div></figure>


<p>但只满足了本机的要求也不够，如果该suite在MIRROR对应源中不存在也无法执行，毕竟源中没有对应版本的deb包那什么也干不了。比如：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo debootstrap karmic target http://mirrors.sohu.com/ubuntu
</span><span class='line'>I: Retrieving Release
</span><span class='line'>E: Failed getting release file http://mirrors.sohu.com/ubuntu/dists/karmic/Release
</span></code></pre></td></tr></table></div></figure>


<p>例子，从<a href="http://mirrors.sohu.com/ubuntu">http://mirrors.sohu.com/ubuntu</a>下载并构建Ubuntu saucy 13.10，存放在<code>./saucy</code>中：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># Example:</span>
</span><span class='line'>sudo debootstrap saucy ./saucy http://mirrors.sohu.com/ubuntu
</span></code></pre></td></tr></table></div></figure>


<p>构建好系统就可以用tar打包了。需要注意的是路径问题，要保证tar包里面的/目录要对应上面的TARGET目录。简单的办法就是先进入TARGET目录，再执行tar命令：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ./saucy
</span><span class='line'>tar -cf ../ubuntu-saucy.tar .
</span><span class='line'><span class="nb">cd</span> ..
</span></code></pre></td></tr></table></div></figure>


<p>有了tar包就可以导入到docker中了，用以下命令导入：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat ./ubuntu-saucy.tar | sudo docker import - saucy
</span></code></pre></td></tr></table></div></figure>


<p>docker的import子命令接受两种形式的参数，一种是URL，另一种是标准输入。上面的命令中的短横杠<code>-</code>表示从标准输入导入，<code>saucy</code>是给这个image起的名字，类似<code>learn/tutorial</code>、<code>ubuntu</code>。因为要从标准输入导入，所以用cat命令将tar包内容输出到标准输出，再用管道连到docker的标准输入。</p>

<p>到这儿就完成了，可以试用一下刚导入的image</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo docker run -i -t saucy cat /etc/issue
</span><span class='line'>WARNING: IPv4 forwarding is disabled.
</span><span class='line'>Ubuntu 13.10 <span class="se">\n</span> <span class="se">\l</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一行就是image的输出。</p>

<p>最后再说一遍“F*K GFW”，搞这么多就为了替代<code>docker pull</code>一行命令。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[metaprogramming ruby notes 1]]></title>
    <link href="http://teeceepee.github.com/blog/2013/07/19/metaprogramming-ruby-notes-1/"/>
    <updated>2013-07-19T13:55:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2013/07/19/metaprogramming-ruby-notes-1</id>
    <content type="html"><![CDATA[<p>这些天在看<a href="http://book.douban.com/">《ruby元编程》</a>。其中有一个关于block的小测验，要模仿C#中的using关键字。</p>

<p>在Ruby中，using可以通过内核方法写一个。内核方法即添加到Kernel模块中的方法，因此可以在程序的任何地方使用，有点像一个关键字。书中给的答案可以通过测试，但是仔细研究发现书中实现的using貌似有些问题，而且是大问题。实现using的目的在于在block中使用资源，使用完毕后自动将资源释放。因此using后面的block一定有一个参数代表资源，using的实现也应该将资源传递给block，所以正确的实现应该如下。</p>

<figure class='code'><figcaption><span>using.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Kernel</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">using</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">resource</span>
</span><span class='line'>  <span class="k">ensure</span>
</span><span class='line'>    <span class="n">resource</span><span class="o">.</span><span class="n">dispose</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>书中的实现在<code>yield</code>后没有resource，无法将资源传递给block。不能在block中使用资源，写这玩意儿有啥用？我看的版本是中文版，不清楚原版是否也有这个错误。另外，书中使用的是<code>begin ... ensure ... end</code>，在用<code>def</code>定义方法时<code>begin</code>是可以省略的。</p>

<p>之所以会出现这个问题，我认为是单元测试的用例写的不够严格。下面是与书中原测试等价的测试用例。</p>

<figure class='code'><figcaption><span>using_test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;test/unit&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;./using.rb&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Resource</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">dispose</span>
</span><span class='line'>    <span class="vi">@dispose</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">disposed?</span>
</span><span class='line'>    <span class="vi">@dispose</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TestUsing</span> <span class="o">&lt;</span> <span class="ss">Test</span><span class="p">:</span><span class="ss">:Unit</span><span class="o">::</span><span class="no">TestCase</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@r</span> <span class="o">=</span> <span class="no">Resource</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_disposes_of_resources</span>
</span><span class='line'>    <span class="n">using</span><span class="p">(</span><span class="vi">@r</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">assert</span> <span class="vi">@r</span><span class="o">.</span><span class="n">disposed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">test_disposes_of_resources_in_case_of_exception</span>
</span><span class='line'>    <span class="n">assert_raises</span><span class="p">(</span><span class="no">Exception</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">using</span><span class="p">(</span><span class="vi">@r</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="k">raise</span> <span class="no">Exception</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以看到，两个测试在block中都没有使用资源。测试的不严谨导致了这个using的大bug。至少应该再添加一个测试，比如：</p>

<figure class='code'><figcaption><span>using_test_add.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_with_block_argument</span>
</span><span class='line'>  <span class="n">using</span><span class="p">(</span><span class="vi">@r</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="n">disposed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>添加这个测试后，书中原代码会无法通过测试，因此可以发现这一bug。</p>

<h1>后记</h1>

<p>刚写完上面的，正在想怎么总结结尾的时候，一个想法忽然在脑海中闪现出来：我是否真的理解了书中设计的using的用法。按照我自己的想法，using的参数是一个实现了dispose方法的资源，后面的block是单形参的。这样using将资源传递给block，在block中使用形参代表资源。后来想了想，using后面的block其实也可以访问到外面的资源，没有必要设置一个参数来传递资源。比如：</p>

<figure class='code'><figcaption><span>using_test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_using</span>
</span><span class='line'>  <span class="n">using</span><span class="p">(</span><span class="vi">@r</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="c1"># something using @r</span>
</span><span class='line'>    <span class="c1"># ...</span>
</span><span class='line'>    <span class="vi">@r</span><span class="o">.</span><span class="n">disposed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">assert</span> <span class="vi">@r</span><span class="o">.</span><span class="n">disposed?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>改完测试，运行通过，那这篇博文怎么办&#8230;
删还是不删，这是一个问题&#8230;</p>

<h1>后记的后记</h1>

<p>终于想出一个不用删掉这篇文章的理由，那就是通过参数传递资源的方式要灵活那么一点。书上的写法因为没有使用参数，所以using后的block必须定义在要立即使用资源的地方，当然C#中的using大约也是这样使用的。但如果资源是通过block的参数传递的，那么这个block就可以通过 <code>Proc.new</code> 或者 <code>lambda</code> 定义在任何地方。比如：</p>

<figure class='code'><figcaption><span>using_define_anywhere.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test_define_anywhere</span>
</span><span class='line'>  <span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="k">do</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span>
</span><span class='line'>    <span class="n">r</span><span class="o">.</span><span class="n">disposed?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">using</span><span class="p">(</span><span class="vi">@r</span><span class="p">,</span> <span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'>  <span class="n">assert</span> <span class="vi">@r</span><span class="o">.</span><span class="n">disposed?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xfce桌面按钮扩展]]></title>
    <link href="http://teeceepee.github.com/blog/2013/06/13/xfce-windowbutton/"/>
    <updated>2013-06-13T22:12:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2013/06/13/xfce-windowbutton</id>
    <content type="html"><![CDATA[<p>前几天更新了一下 Debian 系统，下载了几百兆的更新包，当时用的没问题挺好。昨天再开机后发现 xfc 的面板有问题，最大的变化是窗口按钮不再是扩展的，也就是它的长度会随着打开窗口的数量而变化。我用的面板是垂直的，窗口按钮下面还有其他的项目，原来后面这些项目都是从屏幕底端倒着排列的，中间剩下的空间全都是窗口按钮。现在窗口按钮初始的长度几乎为零，后面的项目紧接着排在后面,这样屏幕底端变成空的了，不喜欢这样的布局。Google 这个问题后在 xfce 官网的<a href="http://www.xfce.org/about/tour?lang=zh_CN">关于</a>找到了答案。</p>

<p><a href="http://www.xfce.org/about/tour?lang=zh_CN">xfce</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby StringScanner]]></title>
    <link href="http://teeceepee.github.com/blog/2013/06/03/ruby-stringscanner/"/>
    <updated>2013-06-03T20:09:00+08:00</updated>
    <id>http://teeceepee.github.com/blog/2013/06/03/ruby-stringscanner</id>
    <content type="html"><![CDATA[<p>想写一个简单的解释器，源代码用字符串表示。本来想自己写一个 scanner，后来发现 Ruby 库中有一个 StringScanner 类，但不是用 Ruby 写的，不能做源码浏览了。在这里记录一下 StringScanner 的用法。</p>

<h1>&lt;b> strscan &lt;/b></h1>

<p>要用 StringScanner 类需要 <code>require 'strscan'</code> ，以前老是忘了这个，这次一定要记住。</p>

<p>按照 StringScanner <a href="http://ruby-doc.org/stdlib-1.9.3/libdoc/strscan/rdoc/StringScanner.html">官方文档</a>的说法，它的用处是对字符串进行词法扫描操作。我用的最多的是 <code>scan</code> 方法，它与 <code>String#scan</code> 最大的不同是内部维护一个 position 变量，使得每次扫描都从position开始而不是开头。</p>

<h1>常用方法</h1>

<p><code>StringScanner.new</code> 构造一个 StringScanner 对象，参数是待扫描的字符串。</p>

<figure class='code'><figcaption><span>StringScanner.new</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">StringScanner</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;(+ a 2)&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>StringScanner#eos?</code> 判断是否扫描完毕。</p>

<p><code>StringScanner#scan</code> 参数 pattern 为一个正则表达式，尝试从当前位置与 pattern 匹配，如果成功那么 scanner 前进到下一个待扫描位置并返回匹配的字符串，前进的数目与匹配字符串的长度相等。匹配失败的话返回 <code>nil</code>。</p>

<figure class='code'><figcaption><span>StringScanner#scan</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">StringScanner</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s1">&#39;test string&#39;</span><span class="p">)</span>
</span><span class='line'><span class="nb">p</span> <span class="n">s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w+/</span><span class="p">)</span>   <span class="c1"># -&gt; &quot;test&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w+/</span><span class="p">)</span>   <span class="c1"># -&gt; nil</span>
</span><span class='line'><span class="nb">p</span> <span class="n">s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\s+/</span><span class="p">)</span>   <span class="c1"># -&gt; &quot; &quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/\w+/</span><span class="p">)</span>   <span class="c1"># -&gt; &quot;string&quot;</span>
</span><span class='line'><span class="nb">p</span> <span class="n">s</span><span class="o">.</span><span class="n">scan</span><span class="p">(</span><span class="sr">/./</span><span class="p">)</span>     <span class="c1"># -&gt; nil</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>StringScanner#peek</code> 接受一个数字类型的参数 len，返回 <code>string[pos, len]</code>，也就是即将被扫描的字符串，不推进扫描指针。</p>

<p><code>StringScanner#check</code> 与 <code>scan</code> 类似，但是不推进扫描指针。</p>
]]></content>
  </entry>
  
</feed>
